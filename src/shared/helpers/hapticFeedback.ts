import { WEBVIEW_EVENT_TYPE } from "@/shared/consts/webview/event";

// !주의: 하단 enum은 expo-haptics 라이브러리에서 선언된 타입입니다.

/**
 * The type of notification feedback generated by a UINotificationFeedbackGenerator object.
 * [`UINotificationFeedbackType`](https://developer.apple.com/documentation/uikit/uinotificationfeedbacktype)
 */
enum NotificationFeedbackType {
  /**
   * A notification feedback type indicating that a task has completed successfully.
   */
  Success = "success",
  /**
   * A notification feedback type indicating that a task has produced a warning.
   */
  Warning = "warning",
  /**
   * A notification feedback type indicating that a task has failed.
   */
  Error = "error",
}

/**
 * The mass of the objects in the collision simulated by a UIImpactFeedbackGenerator object
 * [`UINotificationFeedbackStyle`](https://developer.apple.com/documentation/uikit/uiimpactfeedbackstyle)
 */
enum ImpactFeedbackStyle {
  /**
   * A collision between small, light user interface elements.
   */
  Light = "light",
  /**
   * A collision between moderately sized user interface elements.
   */
  Medium = "medium",
  /**
   * A collision between large, heavy user interface elements.
   */
  Heavy = "heavy",
  /**
   * A collision between user interface elements that are soft, exhibiting a large amount of compression or elasticity.
   */
  Soft = "soft",
  /**
   * A collision between user interface elements that are rigid, exhibiting a small amount of compression or elasticity.
   */
  Rigid = "rigid",
}

export type HapticFeedbackEvent =
  | {
      feedback: "impact";
      weight: ImpactFeedbackStyle;
    }
  | {
      feedback: "notification";
      notiType: NotificationFeedbackType;
    }
  | {
      feedback: "select";
    };

export const hapticFeedback = (option: HapticFeedbackEvent) => {
  window.ReactNativeWebView.postMessage(
    JSON.stringify({
      type: WEBVIEW_EVENT_TYPE.HAPTIC_FEEDBACK,
      ...option,
    })
  );
};
